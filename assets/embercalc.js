eval("//# sourceURL=vendor/ember-cli/loader.js");

;eval("define(\"embercalc/adapters/application\", \n  [\"ember-data\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DS = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = DS.FixtureAdapter.extend({\n    });\n  });//# sourceURL=embercalc/adapters/application.js");

;eval("define(\"embercalc/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"embercalc/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Resolver = __dependency2__[\"default\"];\n    var loadInitializers = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    var App = Ember.Application.extend({\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix,\n      Resolver: Resolver\n    });\n\n    loadInitializers(App, config.modulePrefix);\n\n    __exports__[\"default\"] = App;\n  });//# sourceURL=embercalc/app.js");

;eval("define(\"embercalc/controllers/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.ArrayController.extend({\n      display: \'\',\n      operator: \'\',\n      operand_1: \'\',\n      operand_2: \'\',\n      after_calc: 0,\n\n      actions: {\n        zero: function() {\n          this.checkForClear();\n          this.append(\'0\');\n        },\n        one: function() {\n          this.checkForClear();\n          this.append(\'1\');\n        },\n        two: function() {\n          this.checkForClear();\n          this.append(\'2\');\n        },\n        three: function() {\n          this.checkForClear();\n          this.append(\'3\');\n        },\n        four: function() {\n          this.checkForClear();\n          this.append(\'4\');\n        },\n        five: function() {\n          this.checkForClear();\n          this.append(\'5\');\n        },\n        six: function() {\n          this.checkForClear();\n          this.append(\'6\');\n        },\n        seven: function() {\n          this.checkForClear();\n          this.append(\'7\');\n        },\n        eight: function() {\n          this.checkForClear();\n          this.append(\'8\');\n        },\n        nine: function() {\n          this.checkForClear();\n          this.append(\'9\');\n        },\n        decimal: function() {\n          this.checkForClear();\n          this.append(\'.\');\n        },\n        plus: function() {\n          this.checkForCalc();\n          this.set(\'operator\', \'+\');\n        },\n        minus: function() {\n          this.checkForCalc();\n          this.set(\'operator\', \'-\');\n        },\n        multiply: function() {\n          this.checkForCalc();\n          this.set(\'operator\', \'*\');\n        },\n        divide: function() {\n          this.checkForCalc();\n          this.set(\'operator\', \'/\');\n        },\n        equals: function() {\n          this.checkForCalc();\n        },\n        clear: function() {\n          this.clear();\n        }\n      },\n\n      append: function(value) {\n        var operator = this.get(\'operator\');\n        var amount = \'\';\n        if (operator === \'\') {\n          amount = this.get(\'operand_1\');\n          amount = amount + value;\n          this.set(\'operand_1\', amount);\n          this.set(\'myDisplay\', this.get(\'operand_1\'));\n        } else {\n          amount = this.get(\'operand_2\');\n          amount = amount + value;\n          this.set(\'operand_2\', amount);\n          this.set(\'myDisplay\', this.get(\'operand_2\'));\n        }\n      },\n\n      checkForCalc: function() {\n        if (this.get(\'operand_1\') !== \'\' &&\n            this.get(\'operand_2\') !== \'\' &&\n            this.get(\'operator\') !== \'\') {\n          this.calc();\n        }\n      },\n\n      checkForClear: function() {\n        if (this.get(\'operand_1\') !== \'\' &&\n            this.get(\'operator\') === \'\' &&\n            parseInt(this.get(\'after_calc\')) > 0) {\n          this.clear();\n        }\n      },\n\n      clear: function() {\n        this.set(\'operand_1\', \'\');\n        this.set(\'aperand_2\', \'\');\n        this.set(\'operator\', \'\');\n        this.set(\'myDisplay\', \'\');\n        this.set(\'after_calc\', 0);\n      },\n\n      calc: function() {\n        var operand_1 = parseFloat(this.get(\'operand_1\'));\n        var operand_2 = parseFloat(this.get(\'operand_2\'));\n        var operator = this.get(\'operator\');\n        var result;\n        if (operator === \'+\') {\n          result = operand_1 + operand_2;\n        }\n\n        if (operator === \'-\') {\n          result = operand_1 - operand_2;\n        }\n\n        if (operator === \'*\') {\n          result = operand_1 * operand_2;\n        }\n\n        if (operator === \'/\') {\n          result = operand_1 / operand_2;\n        }\n\n        this.set(\'myDisplay\', result);\n        this.set(\'operand_1\', result);\n        this.set(\'operand_2\', \'\');\n        this.set(\'operator\', \'\');\n        this.set(\'after_calc\', this.get(\'after_calc\') + 1);\n      }\n    });\n  });//# sourceURL=embercalc/controllers/application.js");

;eval("define(\"embercalc/initializers/export-application-global\", \n  [\"ember\",\"embercalc/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    function initialize(container, application) {\n      var classifiedName = Ember.String.classify(config.modulePrefix);\n\n      if (config.exportApplicationGlobal) {\n        window[classifiedName] = application;\n      }\n    };\n    __exports__.initialize = initialize;\n    __exports__[\"default\"] = {\n      name: \'export-application-global\',\n\n      initialize: initialize\n    };\n  });//# sourceURL=embercalc/initializers/export-application-global.js");

;eval("define(\"embercalc/router\", \n  [\"ember\",\"embercalc/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var Router = Ember.Router.extend({\n      location: config.locationType\n    });\n\n    Router.map(function() {\n    });\n\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=embercalc/router.js");

;eval("define(\"embercalc/templates/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(\"<h2 id=\'title\'>EmberCalc</h2>\\n\\n\\n<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-4\\\">\");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'type\': (\"text\"),\n        \'id\': (\"my-display\"),\n        \'value\': (\"myDisplay\"),\n        \'placeholder\': (\"\"),\n        \'action\': (\"updateDisplay\")\n      },hashTypes:{\'type\': \"STRING\",\'id\': \"STRING\",\'value\': \"ID\",\'placeholder\': \"STRING\",\'action\': \"STRING\"},hashContexts:{\'type\': depth0,\'id\': depth0,\'value\': depth0,\'placeholder\': depth0,\'action\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"</div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clear\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"col-md-1\\\">C</div>\\n    <div class=\\\"col-md-1\\\"></div>\\n    <div class=\\\"col-md-1\\\"></div>\\n    <div \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"divide\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"col-md-1\\\">/</div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"seven\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"col-md-1\\\">7</div>\\n    <div \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"eight\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"col-md-1\\\">8</div>\\n    <div \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"nine\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"col-md-1\\\">9</div>\\n    <div \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"multiply\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"col-md-1\\\">*</div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"four\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"col-md-1\\\">4</div>\\n    <div \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"five\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"col-md-1\\\">5</div>\\n    <div \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"six\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"col-md-1\\\">6</div>\\n    <div \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"minus\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"col-md-1\\\">-</div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"one\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"col-md-1\\\">1</div>\\n    <div \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"two\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"col-md-1\\\">2</div>\\n    <div \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"three\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"col-md-1\\\">3</div>\\n    <div \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"plus\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"col-md-1\\\">+</div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-1\\\"></div>\\n    <div \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"zero\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"col-md-1\\\">0</div>\\n    <div \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"decimal\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"col-md-1\\\">.</div>\\n    <div \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"equals\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"col-md-1\\\">=</div>\\n  </div>\\n</div>\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=embercalc/templates/application.js");

;eval("define(\"embercalc/tests/adapters/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - adapters\');\n    test(\'adapters/application.js should pass jshint\', function() { \n      ok(true, \'adapters/application.js should pass jshint.\'); \n    });\n  });//# sourceURL=embercalc/tests/adapters/application.jshint.js");

;eval("define(\"embercalc/tests/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'app.js should pass jshint\', function() { \n      ok(true, \'app.js should pass jshint.\'); \n    });\n  });//# sourceURL=embercalc/tests/app.jshint.js");

;eval("define(\"embercalc/tests/controllers/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/application.js should pass jshint\', function() { \n      ok(true, \'controllers/application.js should pass jshint.\'); \n    });\n  });//# sourceURL=embercalc/tests/controllers/application.jshint.js");

;eval("define(\"embercalc/tests/embercalc/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - embercalc/tests/helpers\');\n    test(\'embercalc/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'embercalc/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=embercalc/tests/embercalc/tests/helpers/resolver.jshint.js");

;eval("define(\"embercalc/tests/embercalc/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - embercalc/tests/helpers\');\n    test(\'embercalc/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'embercalc/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=embercalc/tests/embercalc/tests/helpers/start-app.jshint.js");

;eval("define(\"embercalc/tests/embercalc/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - embercalc/tests\');\n    test(\'embercalc/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'embercalc/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=embercalc/tests/embercalc/tests/test-helper.jshint.js");

;eval("define(\"embercalc/tests/embercalc/tests/unit/adapters/application-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - embercalc/tests/unit/adapters\');\n    test(\'embercalc/tests/unit/adapters/application-test.js should pass jshint\', function() { \n      ok(true, \'embercalc/tests/unit/adapters/application-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=embercalc/tests/embercalc/tests/unit/adapters/application-test.jshint.js");

;eval("define(\"embercalc/tests/embercalc/tests/unit/controllers/application-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - embercalc/tests/unit/controllers\');\n    test(\'embercalc/tests/unit/controllers/application-test.js should pass jshint\', function() { \n      ok(true, \'embercalc/tests/unit/controllers/application-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=embercalc/tests/embercalc/tests/unit/controllers/application-test.jshint.js");

;eval("define(\"embercalc/tests/embercalc/tests/unit/controllers/calc-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - embercalc/tests/unit/controllers\');\n    test(\'embercalc/tests/unit/controllers/calc-test.js should pass jshint\', function() { \n      ok(true, \'embercalc/tests/unit/controllers/calc-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=embercalc/tests/embercalc/tests/unit/controllers/calc-test.jshint.js");

;eval("define(\"embercalc/tests/embercalc/tests/unit/models/application-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - embercalc/tests/unit/models\');\n    test(\'embercalc/tests/unit/models/application-test.js should pass jshint\', function() { \n      ok(true, \'embercalc/tests/unit/models/application-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=embercalc/tests/embercalc/tests/unit/models/application-test.jshint.js");

;eval("define(\"embercalc/tests/helpers/resolver\", \n  [\"ember/resolver\",\"embercalc/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix\n    };\n\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=embercalc/tests/helpers/resolver.js");

;eval("define(\"embercalc/tests/helpers/start-app\", \n  [\"ember\",\"embercalc/app\",\"embercalc/router\",\"embercalc/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Application = __dependency2__[\"default\"];\n    var Router = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    __exports__[\"default\"] = function startApp(attrs) {\n      var App;\n\n      var attributes = Ember.merge({}, config.APP);\n      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n      Router.reopen({\n        location: \'none\'\n      });\n\n      Ember.run(function() {\n        App = Application.create(attributes);\n        App.setupForTesting();\n        App.injectTestHelpers();\n      });\n\n      App.reset(); // this shouldn\'t be needed, i want to be able to \"start an app at a specific URL\"\n\n      return App;\n    }\n  });//# sourceURL=embercalc/tests/helpers/start-app.js");

;eval("define(\"embercalc/tests/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'router.js should pass jshint\', function() { \n      ok(true, \'router.js should pass jshint.\'); \n    });\n  });//# sourceURL=embercalc/tests/router.jshint.js");

;eval("define(\"embercalc/tests/test-helper\", \n  [\"embercalc/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n    var setResolver = __dependency2__.setResolver;\n\n    setResolver(resolver);\n\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\n\n    QUnit.config.urlConfig.push({ id: \'nocontainer\', label: \'Hide container\'});\n    var containerVisibility = QUnit.urlParams.nocontainer ? \'hidden\' : \'visible\';\n    document.getElementById(\'ember-testing-container\').style.visibility = containerVisibility;\n  });//# sourceURL=embercalc/tests/test-helper.js");

;eval("define(\"embercalc/tests/unit/adapters/application-test\", \n  [\"ember-qunit\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var moduleFor = __dependency1__.moduleFor;\n    var test = __dependency1__.test;\n\n    moduleFor(\'adapter:application\', \'ApplicationAdapter\', {\n      // Specify the other units that are required for this test.\n      // needs: [\'serializer:foo\']\n    });\n\n    // Replace this with your real tests.\n    test(\'it exists\', function() {\n      var adapter = this.subject();\n      ok(adapter);\n    });\n  });//# sourceURL=embercalc/tests/unit/adapters/application-test.js");

;eval("define(\"embercalc/tests/unit/controllers/application-test\", \n  [\"ember-qunit\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var moduleFor = __dependency1__.moduleFor;\n    var test = __dependency1__.test;\n\n    moduleFor(\'controller:application\', \'ApplicationController\', {\n      // Specify the other units that are required for this test.\n      // needs: [\'controller:foo\']\n    });\n\n    // Replace this with your real tests.\n    test(\'it exists\', function() {\n      var controller = this.subject();\n      ok(controller);\n    });\n  });//# sourceURL=embercalc/tests/unit/controllers/application-test.js");

;eval("define(\"embercalc/tests/unit/controllers/calc-test\", \n  [\"ember-qunit\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var moduleFor = __dependency1__.moduleFor;\n    var test = __dependency1__.test;\n\n    moduleFor(\'controller:calc\', \'CalcController\', {\n      // Specify the other units that are required for this test.\n      // needs: [\'controller:foo\']\n    });\n\n    // Replace this with your real tests.\n    test(\'it exists\', function() {\n      var controller = this.subject();\n      ok(controller);\n    });\n  });//# sourceURL=embercalc/tests/unit/controllers/calc-test.js");

;eval("define(\"embercalc/tests/unit/models/application-test\", \n  [\"ember-qunit\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var moduleForModel = __dependency1__.moduleForModel;\n    var test = __dependency1__.test;\n\n    moduleForModel(\'application\', \'Application\', {\n      // Specify the other units that are required for this test.\n      needs: []\n    });\n\n    test(\'it exists\', function() {\n      var model = this.subject();\n      // var store = this.store();\n      ok(!!model);\n    });\n  });//# sourceURL=embercalc/tests/unit/models/application-test.js");

/* jshint ignore:start */

define('embercalc/config/environment', ['ember'], function(Ember) {
  var prefix = 'embercalc';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */


});

if (runningTests) {
  require('embercalc/tests/test-helper');
} else {
  require('embercalc/app')['default'].create({"LOG_ACTIVE_GENERATION":true,"LOG_VIEW_LOOKUPS":true});
}

/* jshint ignore:end */
